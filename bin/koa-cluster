#!/usr/bin/env node
var cluster = require('cluster'),
    cpus = require('os').cpus().length,
    procs = Math.ceil(0.75 * cpus),
    path = require('path'),
    forking = true;

process.title = 'spark-api';

cluster.setupMaster({
    exec: require.resolve('../lib/http.js'),
    execArgv: ['--harmony', '--harmony_destructuring'],
    args: [path.resolve(process.argv[2])]
});

function fork() {
    console.log('[CLUSTER] Master pid %d, forking %d processes...', process.pid, procs);
    for (var i = 0; i < procs; i++) {
        cluster.fork();
    }
}

function killCluster(exitCode) {
    console.log('[CLUSTER] Killing workers');
    forking = false;

    killWorkers();

    cluster.on('disconnect', function () {
        console.log('[CLUSTER] Workers exited gracefully.');
        process.exit(exitCode);
    });
}

process.on('SIGINT', function () {
    killCluster(130);
});

process.on('SIGTERM', function () {
    killCluster(143);
});

process.on('SIGHUP', function () {
    console.log('[CLUSTER] Restarting workers');
    killWorkers();
});

function killWorkers() {
    for (var id in cluster.workers) {
        cluster.workers[id].kill();
    }
}

cluster.on('exit', function (worker, code, signal) {
    console.log('[CLUSTER] worker %d died (%s)' + (forking ? ' restarting...' : ''),
        worker.process.pid,
        signal || code
    );

    if (forking) {
        cluster.fork();
    }
});

fork();
